var SCG_Message;
SCG_Message  = "----------------------------------------------------------&#13;&#10;";
SCG_Message += "-- Generated by Wilderzone Live Server Config Generator --&#13;&#10;";
SCG_Message += "--              Thanks for your support <3              --&#13;&#10;";
SCG_Message += "----------------------------------------------------------&#13;&#10;&#13;&#10;";
SCG_Message += "-- You can read about the configuration language at: https://www.tamods.org/docs/doc_srv_api_overview.html&#13;&#10;&#13;&#10;&#13;&#10;";
var master_settings_list;
var user_settings;
var total_user_configs = 0;
var leftButtonIndex = 0;
var topButtonIndex = 0;
var listOfParams = [];
var currentUserConfig = 0;

function getAdminConsole(){
  $.ajax({
    dataType:"json",
    url:"master_settings_list.json",
    cache:false,
    success:function(data1){
      master_settings_list = data1;
      $.ajax({
        dataType:"json",
        url:"user_settings.json",
        cache:false,
        success:function(data2){
          user_settings = data2;
          currentUserConfig = Object.keys(user_settings["Configs"])[0];
          makeListOfParams();
          populateGenerator();
        },
        error:function(xhr, status, err){
          console.log("Error " + xhr.status);
        }
      });
    },
    error:function(xhr, status, err){
      console.log("Error " + xhr.status);
    }
  });
}

function makeListOfParams(){
  Object.keys(master_settings_list).forEach(function(parentKey){
    Object.keys(master_settings_list[parentKey]["parameters"]).forEach(function(label){
      listOfParams.push(parentKey + "-" + label);
    });
  });
  console.log(listOfParams);
}

function populateGenerator(){
  $("#config_generator_container").empty();
  
  total_user_configs = Object.keys(user_settings).length;
  
  //General Layout
  var config_top_tabs = '';
  var i = 1;
  Object.keys(master_settings_list).forEach(function(k){
    if(i === 1){var active = " active";}else{var active = "";}
    config_top_tabs += '<div class="config_top_tab' + active + '" onclick="switchTopButton(event)"><img src="../assets/icons/' + k + '.svg" draggable="false"><p>' + k + '</p></div>';
    i++;
  });
  
  var item = '<div id="config_left"></div>'
           + '<div id="config_right">'
           +   '<div id="config_top_tabs_container">'
           +     config_top_tabs
           +   '</div>'
           +   '<div id="config_main"></div>'
           + '</div>';
  
  $("#config_generator_container").append(item);
  
  //Left List
  refreshLeft(1);
  
  //Main Section
  refreshMainSection();
}

function switchLeftButton(e){
  $(".config_left_tab").removeClass("active");
  $(e.target).addClass("active");
  leftButtonIndex = $(e.target).prevAll().length;
  //refreshMainSection();
}
function switchTopButton(e){
  $(".config_top_tab").removeClass("active");
  $(e.target).addClass("active");
  topButtonIndex = $(e.target).prevAll().length;
  $(".config_page").addClass("hidden");
  $("#" + $(e.target).children(":nth-child(2)").html() + "-PAGE").removeClass("hidden");
}


///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

function refreshMainSection(){
  $("#config_main").empty();
  //Main
  Object.keys(user_settings["Configs"]).forEach(function(uc){
    Object.keys(master_settings_list).forEach(function(m){
      if(m == $("#config_top_tabs_container").children(":nth-child(" + (topButtonIndex + 1) + ")").children(":nth-child(2)").html()){
        var item = '<div id="' + m + '-PAGE" class="config_page ' + uc + '"></div>';
      }else{
        var item = '<div id="' + m + '-PAGE" class="config_page ' + uc + ' hidden"></div>';
      }
      $("#config_main").append(item);
      Object.keys(master_settings_list[m]["parameters"]).forEach(function(k){
        var item = processControlType(k, master_settings_list[m]["parameters"][k], m);
        $("#" + m + "-PAGE").append(item);
      });
    });
  });
  
  saveAndOutputConfig("test_config");
}

function processControlType(label, object, parentKey){
      //console.log(parentKey + " - " + label);
      //console.log(object);
  var type = object["type"];
  var options = (object["options"] == null ? "" : object["options"]);
  var defaultValue = (object["default"] == null ? "" : object["default"]);
  var command = (object["cmd"] == null ? "" : object["cmd"]);
  var info = (object["info"] == null ? "" : object["info"]);
  
  if(type == "info"){ //Info
    var item = '<div class="config_option"><p class="label">' + label.split("_").join(" ") + ':</p>'
             +   '<p id="' + parentKey + '-' + label + '">' + info + '</p>'
             + '</div>';
    
  }else if(type == "string"){ //String
    var item = '<div class="config_option"><p class="label">' + label.split("_").join(" ") + ':</p>'
             +   '<input id="' + parentKey + '-' + label + '" type="text" value="' + defaultValue + '" onchange="handleInput(event,' + "'" + parentKey + '-' + label + "'" + ')">'
             + '</div>';
    
  }else if(type == "multiple-string"){ //Textarea
    var item = '<div class="config_option"><p class="label">' + label.split("_").join(" ") + ':</p>'
             +   '<textarea id="' + parentKey + '-' + label + '" rows="7" cols="60" spellcheck="false" onchange="handleInput(event,' + "'" + parentKey + '-' + label + "'" + ')">' + defaultValue + '</textarea>'
             + '</div>';
    
  }else if(type == "number"){ //Number
    var item = '<div class="config_option"><p class="label">' + label.split("_").join(" ") + ':</p>'
             +   '<input id="' + parentKey + '-' + label + '" type="number" min="' + options[0] + '" max="' + options[1] + '" value="' + defaultValue + '" onchange="handleInput(event,' + "'" + parentKey + '-' + label + "'" + ')">'
             + '</div>';
    
  }else if(type == "toggle"){ //Checkbox
    var toggleOn = "";
    if(defaultValue === true){
      toggleOn = " checked ";
    }
    var opts = "";
    options.forEach(function(o){
      opts += '<div class="checkbox_item">'
            +   '<input id="' + parentKey + '-' + label + '-' + o.split(" ").join("_") + '" type="checkbox" name="' + o + '"' + toggleOn + 'onchange="handleInput(event,' + "'" + parentKey + '-' + label + '-' + o.split(" ").join("_") + "'" + ')"><label for="' + o + '">' + o + '</label>'
            + '</div>';
    });
    var item = '<div class="config_option"><p class="label">' + label.split("_").join(" ") + ':</p>'
             +   '<div class="checkboxes_container" id="' + parentKey + '-' + label + '">'
             +     opts
             +   '</div>'
             + '</div>';
    
  }else if(type == "list"){ //Dropdown List
    var opts = "";
    options.forEach(function(o){
      var selected = "";
      if(defaultValue == o){
        selected = ' selected="true"';
      }
      opts += '<option value="' + o.split(" ").join("") + '"' + selected + '>' + o + '</option>';
    });
    
    var item = '<div class="config_option"><p class="label">' + label.split("_").join(" ") + ':</p><form>'
             +   '<select id="' + parentKey + '-' + label + '" onchange="handleInput(event,' + "'" + parentKey + '-' + label + "'" + ')">'
             +     opts
             +   '</select>'
             + '</form></div>';
    
  }else if(type == "time"){ //Time
    /*
    var item = '<div class="config_option"><p class="label">' + label.split("_").join(" ") + ':</p><form>'
             +   '<select id="' + parentKey + '-' + label + '" onchange="handleInput(event)">';
    
    options.forEach(function(h){
      //if(kdata[0] == h){
      //  item +=    '<option value="' + h + '" selected>' + h + '</option>';
      //}else{
        item +=    '<option value="' + h + '">' + h + '</option>';
      //}
    });
    
       item +=   '</select>'
             + '</form>'
             + '<label> &#11834; </label>'
             + '<form>'
             +   '<select>';
    
    options.forEach(function(h){
      //if(kdata[1] == h){
      //  item +=    '<option value="' + h + '" selected>' + h + '</option>';
      //}else{
        item +=    '<option value="' + h + '">' + h + '</option>';
      //}
    });
    
       item +=   '</select>'
             + '</form></div>';
    
    */
  }else{
    var item = "";
  }
  
  return item;
}


function newConfig(){
  total_user_configs++;
  user_settings["Config-" + total_user_configs] = {};
  refreshLeft(total_user_configs);
}

function refreshLeft(activeTab){
  $("#config_left").empty();
  var i = 1;
  Object.keys(user_settings).forEach(function(k){
    if(i === activeTab){var active = " active";}else{var active = "";}
    var item = '<div id="' + k + '" class="config_left_tab' + active + '" onclick="switchLeftButton(event)"><span></span><p>' + k + '</p></div>';
    $("#config_left").append(item);
    i++;
  });
  var item = '<div id="new_config_button" onclick="newConfig()"><img src="../assets/icons/add_acrylic_lightblue_24dp.svg" draggable="false"><p>New Config</p></div>';
  $("#config_left").append(item);
}




function handleInput(event){
  var currentTab = $("#config_top_tabs_container").children().filter(".active").children(":nth-child(2)").html();
  //console.log(currentTab + " " + $(event.target).attr("name"));
  /*
  var output = $("#config_output").html();
  if(currentTab == "Maps"){
    output += "&#13;&#10;";
    output += "ServerSettings.MapRotation.add(Maps.CTF.ArxNovena)";
  }
  
  $("#config_output").html(output);
  */
  saveAndOutputConfig("test_config");
}



function saveAndOutputConfig(config_target){
  user_settings["Configs"][config_target] = new Object();
  var newConfig = new Object();
  var output = SCG_Message;
  var previousParentKey = "";
  
  listOfParams.forEach(function(param){
    newConfig[param.split("-")[0]] = new Object();
  });
  
  listOfParams.forEach(function(param){
    var parentKey = param.split("-")[0];
    var paramKey = param.split("-")[1];
    var mslp = master_settings_list[parentKey]["parameters"][paramKey];
    if(master_settings_list[parentKey] != previousParentKey){
      output += createLuaHeading(master_settings_list[parentKey]["lua_heading"]);
      previousParentKey = master_settings_list[parentKey];
    }
    
    if(mslp["type"] == "toggle"){
      mslp["options"].forEach(function(a){
        newConfig[parentKey][paramKey] = new Object();
      });
      mslp["options"].forEach(function(a){
        var uipv = getUIParamValue(param + "-" + a.split(" ").join("_"));
        newConfig[parentKey][paramKey][a.split(" ").join("_")] = uipv;
        if(mslp["cmd"] != "" && uipv != ""){
          if((mslp["cmd_condition"] == "" && uipv == "true") || (mslp["cmd_condition"] == "inverted" && uipv == "false")){
            var joiner = "_";
            if(parentKey == "Maps"){
              joiner = "";
            }else if(parentKey == "Classes"){
              joiner = " ";
            }
            output += mslp["cmd"].split("$").join(a.split(" ").join(joiner)) + "&#13;&#10;";
          }
        }
      });
    }else if(mslp["type"] == "info"){
      //Ignore
    }else{
      var uipv = getUIParamValue(param);
      if(mslp["cmd"] != null && mslp["cmd"] != "" && uipv != "" && uipv != "false"){
        if(mslp["type"] == "string"){
          output += mslp["cmd"].split("$").join("'" + uipv + "'") + "&#13;&#10;";
        }else{
          output += mslp["cmd"].split("$").join(uipv) + "&#13;&#10;";
        }
      }
      newConfig[parentKey][paramKey] = uipv;
    }
  });
  
  user_settings["Configs"][config_target] = newConfig;
  console.log(user_settings["Configs"]);
  
  $("#config_output").html(output);
}

function getUIParamValue(ID){
  var elem = $("#" + ID);
  var value;
  
  if(elem[0].type == "text" || elem[0].type == "textarea" || elem[0].type == "select-one" || elem[0].type == "number"){
    value = elem[0].value;
  }else if(elem[0].type == "checkbox"){
    value = elem[0].checked;
  }
  
  if(typeof value == null){
    return "";
  }else{
    return value.toString();
  }
}

function createLuaHeading(string){
  var output = "&#13;&#10;";
  var L = 50;
  var hyphen = "-";
  var i = 0;
  while(i < ((L - 2 - Math.floor(string.length / 2)) / 2)){
    output += hyphen; 
    i++;
  }
  output += " " + string + " ";
  i = 0;
  while(i < ((L - 2 - Math.floor(string.length / 2)) / 2)){
    output += hyphen; 
    i++;
  }
  return output + "&#13;&#10;";
}







getAdminConsole();